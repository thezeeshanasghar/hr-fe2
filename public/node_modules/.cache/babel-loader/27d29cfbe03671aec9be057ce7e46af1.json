{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { setUserData } from './userSlice';\nexport const submitLogin = ({\n  email,\n  password\n}) => async dispatch => {\n  return jwtService.signInWithEmailAndPassword(email, password).then(user => {\n    dispatch(setUserData(user));\n    return dispatch(loginSuccess());\n  }).catch(error => {\n    return dispatch(loginError(error));\n  });\n};\nexport const submitLoginWithFireBase = ({\n  username,\n  password\n}) => async dispatch => {\n  if (!firebaseService.auth) {\n    console.warn(\"Firebase Service didn't initialize, check your configuration\");\n    return () => false;\n  }\n\n  return firebaseService.auth.signInWithEmailAndPassword(username, password).then(() => {\n    return dispatch(loginSuccess());\n  }).catch(error => {\n    const usernameErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email', 'auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n    const passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n    const response = {\n      username: usernameErrorCodes.includes(error.code) ? error.message : null,\n      password: passwordErrorCodes.includes(error.code) ? error.message : null\n    };\n\n    if (error.code === 'auth/invalid-api-key') {\n      dispatch(showMessage({\n        message: error.message\n      }));\n    }\n\n    return dispatch(loginError(response));\n  });\n};\nconst initialState = {\n  success: false,\n  error: {\n    username: null,\n    password: null\n  }\n};\nconst loginSlice = createSlice({\n  name: 'auth/login',\n  initialState,\n  reducers: {\n    loginSuccess: (state, action) => {\n      state.success = true;\n    },\n    loginError: (state, action) => {\n      state.success = false;\n      state.error = action.payload;\n    }\n  },\n  extraReducers: {}\n});\nexport const {\n  loginSuccess,\n  loginError\n} = loginSlice.actions;\nexport default loginSlice.reducer;","map":{"version":3,"sources":["E:/employee management system/hr/new theme/Fuse-React-v5.2.1-skeleton/src/app/auth/store/loginSlice.js"],"names":["createSlice","showMessage","firebaseService","jwtService","setUserData","submitLogin","email","password","dispatch","signInWithEmailAndPassword","then","user","loginSuccess","catch","error","loginError","submitLoginWithFireBase","username","auth","console","warn","usernameErrorCodes","passwordErrorCodes","response","includes","code","message","initialState","success","loginSlice","name","reducers","state","action","payload","extraReducers","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { setUserData } from './userSlice';\n\nexport const submitLogin = ({ email, password }) => async dispatch => {\n\treturn jwtService\n\t\t.signInWithEmailAndPassword(email, password)\n\t\t.then(user => {\n\t\t\tdispatch(setUserData(user));\n\n\t\t\treturn dispatch(loginSuccess());\n\t\t})\n\t\t.catch(error => {\n\t\t\treturn dispatch(loginError(error));\n\t\t});\n};\n\nexport const submitLoginWithFireBase = ({ username, password }) => async dispatch => {\n\tif (!firebaseService.auth) {\n\t\tconsole.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n\t\treturn () => false;\n\t}\n\treturn firebaseService.auth\n\t\t.signInWithEmailAndPassword(username, password)\n\t\t.then(() => {\n\t\t\treturn dispatch(loginSuccess());\n\t\t})\n\t\t.catch(error => {\n\t\t\tconst usernameErrorCodes = [\n\t\t\t\t'auth/email-already-in-use',\n\t\t\t\t'auth/invalid-email',\n\t\t\t\t'auth/operation-not-allowed',\n\t\t\t\t'auth/user-not-found',\n\t\t\t\t'auth/user-disabled'\n\t\t\t];\n\t\t\tconst passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n\n\t\t\tconst response = {\n\t\t\t\tusername: usernameErrorCodes.includes(error.code) ? error.message : null,\n\t\t\t\tpassword: passwordErrorCodes.includes(error.code) ? error.message : null\n\t\t\t};\n\n\t\t\tif (error.code === 'auth/invalid-api-key') {\n\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t}\n\n\t\t\treturn dispatch(loginError(response));\n\t\t});\n};\n\nconst initialState = {\n\tsuccess: false,\n\terror: {\n\t\tusername: null,\n\t\tpassword: null\n\t}\n};\n\nconst loginSlice = createSlice({\n\tname: 'auth/login',\n\tinitialState,\n\treducers: {\n\t\tloginSuccess: (state, action) => {\n\t\t\tstate.success = true;\n\t\t},\n\t\tloginError: (state, action) => {\n\t\t\tstate.success = false;\n\t\t\tstate.error = action.payload;\n\t\t}\n\t},\n\textraReducers: {}\n});\n\nexport const { loginSuccess, loginError } = loginSlice.actions;\n\nexport default loginSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}