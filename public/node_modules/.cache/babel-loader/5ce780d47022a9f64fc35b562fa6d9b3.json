{"ast":null,"code":"import { Chart } from 'react-chartjs-2';\nChart.pluginService.register({\n  afterDatasetsDraw(chart, easing) {\n    // Only activate the plugin if it's made available\n    // in the options\n    if (!chart.options.plugins.xLabelsOnTop || chart.options.plugins.xLabelsOnTop && chart.options.plugins.xLabelsOnTop.active === false) {\n      return;\n    } // To only draw at the end of animation, check for easing === 1\n\n\n    const {\n      ctx\n    } = chart;\n    chart.data.datasets.forEach((dataset, i) => {\n      const meta = chart.getDatasetMeta(i);\n\n      if (!meta.hidden) {\n        meta.data.forEach((element, index) => {\n          // Draw the text in black, with the specified font\n          ctx.fillStyle = chart.options.plugins.xLabelsOnTop.fontColor || 'rgba(0, 0, 0, 0.87)';\n          const fontSize = 13;\n          const fontStyle = 'normal';\n          const fontFamily = 'Muli, Roboto, Helvetica Neue, Arial, sans-serif';\n          ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily); // Just naively convert to string for now\n\n          const dataString = `${dataset.data[index].toString()}k`; // Make sure alignment settings are correct\n\n          ctx.textAlign = 'center';\n          ctx.textBaseline = 'middle';\n          const padding = 15;\n          const startY = 24;\n          const position = element.tooltipPosition();\n          ctx.fillText(dataString, position.x, startY);\n          ctx.save();\n          ctx.beginPath();\n          ctx.setLineDash([5, 3]);\n          ctx.moveTo(position.x, startY + padding);\n          ctx.lineTo(position.x, position.y - padding);\n          ctx.strokeStyle = chart.options.plugins.xLabelsOnTop.borderColor || 'rgba(0, 0, 0, 0.87)';\n          ctx.stroke();\n          ctx.restore();\n        });\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["E:/employee management system/hr/new theme/Fuse-React-v5.2.1-skeleton/src/react-chartjs-2-defaults.js"],"names":["Chart","pluginService","register","afterDatasetsDraw","chart","easing","options","plugins","xLabelsOnTop","active","ctx","data","datasets","forEach","dataset","i","meta","getDatasetMeta","hidden","element","index","fillStyle","fontColor","fontSize","fontStyle","fontFamily","font","helpers","fontString","dataString","toString","textAlign","textBaseline","padding","startY","position","tooltipPosition","fillText","x","save","beginPath","setLineDash","moveTo","lineTo","y","strokeStyle","borderColor","stroke","restore"],"mappings":"AAAA,SAASA,KAAT,QAAsB,iBAAtB;AAEAA,KAAK,CAACC,aAAN,CAAoBC,QAApB,CAA6B;AAC5BC,EAAAA,iBAAiB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChC;AACA;AACA,QACC,CAACD,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAvB,IACCJ,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAtB,IAAsCJ,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAtB,CAAmCC,MAAnC,KAA8C,KAFtF,EAGE;AACD;AACA,KAR+B,CAUhC;;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAUN,KAAhB;AAEAA,IAAAA,KAAK,CAACO,IAAN,CAAWC,QAAX,CAAoBC,OAApB,CAA4B,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC3C,YAAMC,IAAI,GAAGZ,KAAK,CAACa,cAAN,CAAqBF,CAArB,CAAb;;AAEA,UAAI,CAACC,IAAI,CAACE,MAAV,EAAkB;AACjBF,QAAAA,IAAI,CAACL,IAAL,CAAUE,OAAV,CAAkB,CAACM,OAAD,EAAUC,KAAV,KAAoB;AACrC;AACAV,UAAAA,GAAG,CAACW,SAAJ,GAAgBjB,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAtB,CAAmCc,SAAnC,IAAgD,qBAAhE;AACA,gBAAMC,QAAQ,GAAG,EAAjB;AACA,gBAAMC,SAAS,GAAG,QAAlB;AACA,gBAAMC,UAAU,GAAG,iDAAnB;AACAf,UAAAA,GAAG,CAACgB,IAAJ,GAAW1B,KAAK,CAAC2B,OAAN,CAAcC,UAAd,CAAyBL,QAAzB,EAAmCC,SAAnC,EAA8CC,UAA9C,CAAX,CANqC,CAQrC;;AACA,gBAAMI,UAAU,GAAI,GAAEf,OAAO,CAACH,IAAR,CAAaS,KAAb,EAAoBU,QAApB,EAA+B,GAArD,CATqC,CAWrC;;AACApB,UAAAA,GAAG,CAACqB,SAAJ,GAAgB,QAAhB;AACArB,UAAAA,GAAG,CAACsB,YAAJ,GAAmB,QAAnB;AACA,gBAAMC,OAAO,GAAG,EAAhB;AACA,gBAAMC,MAAM,GAAG,EAAf;AACA,gBAAMC,QAAQ,GAAGhB,OAAO,CAACiB,eAAR,EAAjB;AACA1B,UAAAA,GAAG,CAAC2B,QAAJ,CAAaR,UAAb,EAAyBM,QAAQ,CAACG,CAAlC,EAAqCJ,MAArC;AAEAxB,UAAAA,GAAG,CAAC6B,IAAJ;AAEA7B,UAAAA,GAAG,CAAC8B,SAAJ;AACA9B,UAAAA,GAAG,CAAC+B,WAAJ,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AACA/B,UAAAA,GAAG,CAACgC,MAAJ,CAAWP,QAAQ,CAACG,CAApB,EAAuBJ,MAAM,GAAGD,OAAhC;AACAvB,UAAAA,GAAG,CAACiC,MAAJ,CAAWR,QAAQ,CAACG,CAApB,EAAuBH,QAAQ,CAACS,CAAT,GAAaX,OAApC;AACAvB,UAAAA,GAAG,CAACmC,WAAJ,GAAkBzC,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAtB,CAAmCsC,WAAnC,IAAkD,qBAApE;AAEApC,UAAAA,GAAG,CAACqC,MAAJ;AAEArC,UAAAA,GAAG,CAACsC,OAAJ;AACA,SA9BD;AA+BA;AACD,KApCD;AAqCA;;AAnD2B,CAA7B","sourcesContent":["import { Chart } from 'react-chartjs-2';\n\nChart.pluginService.register({\n\tafterDatasetsDraw(chart, easing) {\n\t\t// Only activate the plugin if it's made available\n\t\t// in the options\n\t\tif (\n\t\t\t!chart.options.plugins.xLabelsOnTop ||\n\t\t\t(chart.options.plugins.xLabelsOnTop && chart.options.plugins.xLabelsOnTop.active === false)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// To only draw at the end of animation, check for easing === 1\n\t\tconst { ctx } = chart;\n\n\t\tchart.data.datasets.forEach((dataset, i) => {\n\t\t\tconst meta = chart.getDatasetMeta(i);\n\n\t\t\tif (!meta.hidden) {\n\t\t\t\tmeta.data.forEach((element, index) => {\n\t\t\t\t\t// Draw the text in black, with the specified font\n\t\t\t\t\tctx.fillStyle = chart.options.plugins.xLabelsOnTop.fontColor || 'rgba(0, 0, 0, 0.87)';\n\t\t\t\t\tconst fontSize = 13;\n\t\t\t\t\tconst fontStyle = 'normal';\n\t\t\t\t\tconst fontFamily = 'Muli, Roboto, Helvetica Neue, Arial, sans-serif';\n\t\t\t\t\tctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);\n\n\t\t\t\t\t// Just naively convert to string for now\n\t\t\t\t\tconst dataString = `${dataset.data[index].toString()}k`;\n\n\t\t\t\t\t// Make sure alignment settings are correct\n\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\tconst padding = 15;\n\t\t\t\t\tconst startY = 24;\n\t\t\t\t\tconst position = element.tooltipPosition();\n\t\t\t\t\tctx.fillText(dataString, position.x, startY);\n\n\t\t\t\t\tctx.save();\n\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.setLineDash([5, 3]);\n\t\t\t\t\tctx.moveTo(position.x, startY + padding);\n\t\t\t\t\tctx.lineTo(position.x, position.y - padding);\n\t\t\t\t\tctx.strokeStyle = chart.options.plugins.xLabelsOnTop.borderColor || 'rgba(0, 0, 0, 0.87)';\n\n\t\t\t\t\tctx.stroke();\n\n\t\t\t\t\tctx.restore();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n});\n"]},"metadata":{},"sourceType":"module"}